#! /bin/bash

#--------------------------------------------------------------------
# File      : gen_arch_info_large40.sh
#--------------------------------------------------------------------
#THIS SCRIPT IS DONE FOR TSAR__GENERIC_LETI ARCHITECTURE AND ONLY IT
NB_TTY=4
TTY_CHANNEL_SIZE=0x10
TTY_SIZE=0x1000
TTY_OFFSET=0x10

DMA_SIZE=0x1000
XICU_SIZE=0x1000
BDEV_SIZE=0x1000
IOPIC_SIZE=0x1000
# FrameBuffer size
FB_SIZE=0x80000

BOOT_TTY=0xF4000000

TTY_BASE=0xF4000000
BDEV_BASE=0xF2000000
FBUF_BASE=0xF3000000
DMA_BASE=0xF8000000
MEMC_BASE=0x00000000
XICU_BASE=0xF0000000
IOPIC_BASE=0xF9000000

# Physical address width
ADDR_WIDTH=40

# Default values
DEFAULT_X_MAX=2
DEFAULT_Y_MAX=1
Y_MAX_MAX=${2-$(($DEFAULT_Y_MAX-1))} #taking into account cluster without cpu
DEFAULT_CPU_PER_CLUSTER=4

function mymin()
{
   if test $1 -lt $2 ; then
      echo "$1"
   else
      echo "$2"
   fi
}

#------------------------

X_MAX=${1-$DEFAULT_X_MAX}
Y_MAX=${2-$DEFAULT_Y_MAX}
#Y_MAX will be understood by almos as the the max of cluster with cpu
Y_MAX=$((Y_MAX-1))

NPROCS=$DEFAULT_CPU_PER_CLUSTER
iopic_cluster=$(((X_MAX - 1) * Y_MAX + Y_MAX-1))  

#------------------------
#MAX_MEMC_SIZE=0x30000000
MAX_MEMC_SIZE=0x4000000 #64M
echo "SOFT_MEMC_SIZE = $MAX_MEMC_SIZE"
size=$MAX_MEMC_SIZE
MEMC_SIZE=$(printf "0x%X" $size)

print_comments()
{
    date=$(date "+%c")
    echo "# TSAR hardware description in BIB (Boot Information Block) format"
    echo "# This file is autogenerated by the command: $0"
    echo "# It is ready to be passed to info2bib utility so the binary format can be generated"
    echo " "
    echo "# $USER on $HOSTNAME $date" 
    echo " "
    echo " "
}

print_header()
{
    echo "[HEADER]"
    echo "        REVISION=1"
    echo "        ARCH=SOCLIB-TSAR"
    echo "        XMAX=$X_MAX" 
    echo "        YMAX=$Y_MAX_MAX"
    echo "        CPU_NR=$NPROCS"
    echo "        BSCPU=$BSCPU" 
    echo "        BSCPU_ARCH_ID=$BSCPU_ARCH_ID" 
    echo "        BSTTY=$BOOT_TTY"
    echo "        BSDMA=$DMA_BASE"
    echo "        IOPIC_CLUSTER=$iopic_cluster" # cluster which will deal with IOPIC wti
    echo " "
    echo " "
}

print_cluster()
{
    offset=$1
    cid=$2
    arch_cid=$3
    if [ $cid -eq 0 ]
    then
      dev_nr=5
      tty_base=$(printf "0x%X" $TTY_BASE)
      bdev_base=$(printf "0x%X" $BDEV_BASE)
   else
      dev_nr=3
   fi
    memc_base=$(printf "0x%X" $offset)
    memc_size=$(printf "0x%X" $MEMC_SIZE)
    xicu_base=$(printf "0x%X" $((offset + XICU_BASE)))
    dma_base=$(printf "0x%X" $((offset  + DMA_BASE)))
    
    echo "[CLUSTER]"
    echo "         CID="$cid
    echo "         ARCH_CID="$arch_cid
    echo "         CPU_NR="$NPROCS
    echo "         DEV_NR=$dev_nr"
    echo "         DEVID=RAM       BASE=$memc_base         SIZE=$memc_size     IRQ=-1"
    echo "         DEVID=XICU      BASE=$xicu_base         SIZE=$XICU_SIZE         IRQ=-1"
    echo "         DEVID=DMA       BASE=$dma_base         SIZE=$DMA_SIZE         IRQ=8"
    if [ $cid -eq 0 ]
    then
         echo "         DEVID=TTY       BASE=$tty_base         SIZE=$TTY_CHANNEL_SIZE         IRQ=10"
         echo "         DEVID=BLKDEV    BASE=$bdev_base         SIZE=$BDEV_SIZE         IRQ=9"
    fi
    echo " "
    echo " "
}
print_empty_cluster()
{
    echo "[CLUSTER]"
    echo "         CID=257"
    echo "         ARCH_CID=257"
    echo "         CPU_NR=0"
    echo "         DEV_NR=0"
    echo " "
    echo " "
}
print_io_cluster()
{
    offset=$1
    cid=$2
    arch_cid=$3
    memc_base=$(printf "0x%X" $offset)
    memc_size=$(printf "0x%X" $MEMC_SIZE)
    bdev_base=$(printf "0x%X" $((offset + $BDEV_BASE)))
    tty_base=$(printf "0x%X" $((offset  + $TTY_BASE)))
    fbf_base=$(printf "0x%X" $((offset  + $FBUF_BASE)))
    iopic_base=$(printf "0x%X" $((offset  + $IOPIC_BASE)))

    echo "[CLUSTER]"
    echo "         CID="$cid
    echo "         ARCH_CID="$arch_cid
    echo "         CPU_NR="0
    echo "         DEV_NR=7"
#    echo "         DEVID=RAM       BASE=$memc_base         SIZE=$memc_size          IRQ=-1" 
    echo "         DEVID=BLKDEV    BASE=$bdev_base         SIZE=$BDEV_SIZE          IRQ=8" # irq refer to wti to which it will be linked in xicu of io_cluster
    echo "         DEVID=TTY       BASE=$tty_base          SIZE=$TTY_CHANNEL_SIZE   IRQ=16"
tty_base=$(printf "0x%X" $((offset  + $TTY_BASE + $TTY_OFFSET)))
    echo "         DEVID=TTY       BASE=$tty_base          SIZE=$TTY_CHANNEL_SIZE   IRQ=17"
tty_base=$(printf "0x%X" $((offset  + $TTY_BASE + 2*$TTY_OFFSET)))
    echo "         DEVID=TTY       BASE=$tty_base          SIZE=$TTY_CHANNEL_SIZE   IRQ=18"
tty_base=$(printf "0x%X" $((offset  + $TTY_BASE + 3*$TTY_OFFSET)))
    echo "         DEVID=TTY       BASE=$tty_base          SIZE=$TTY_CHANNEL_SIZE   IRQ=19"
    echo "         DEVID=FB        BASE=$fbf_base          SIZE=$FB_SIZE            IRQ=-1"
    echo "         DEVID=IOPIC     BASE=$iopic_base        SIZE=$IOPIC_SIZE         IRQ=-1"
    echo " "
    echo " "
}

X_WIDTH=4
Y_WIDTH=4

x=0; y=0
BSCPU=0;
BSCPU_ARCH_ID=0;

# Generate the description
print_comments "$0"
print_header

X_LAST=$((X_MAX - 1))
x=0; y=0
while test $x -lt $X_MAX
do
   while test $y -lt $Y_MAX
   do
      cid=$((x * Y_MAX + y))
      arch_cid=$(( ( (x << Y_WIDTH) & 0xF0 ) | ( y & 0xF ))) 
      offset=$((arch_cid << 32))
      print_cluster $offset $cid $arch_cid
      y=$((y + 1))
   done
   if [ $x -ne $X_LAST ]
   then
      print_empty_cluster
   fi
   y=0
   x=$((x + 1))
done

cid=$(((X_MAX - 1) * Y_MAX + Y_MAX))  
arch_cid=$(( ( ( (X_MAX - 1) << Y_WIDTH) & 0xF0 ) | (Y_MAX & 0xF ))) 
offset=$((arch_cid << 32))
print_io_cluster $offset $cid $arch_cid

#-------------------------------------------------------------------------#
#                                End of script                            #
#-------------------------------------------------------------------------#
